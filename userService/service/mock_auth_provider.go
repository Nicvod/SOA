// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthProvider is a mock of AuthProvider interface.
type MockAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthProviderMockRecorder
}

// MockAuthProviderMockRecorder is the mock recorder for MockAuthProvider.
type MockAuthProviderMockRecorder struct {
	mock *MockAuthProvider
}

// NewMockAuthProvider creates a new mock instance.
func NewMockAuthProvider(ctrl *gomock.Controller) *MockAuthProvider {
	mock := &MockAuthProvider{ctrl: ctrl}
	mock.recorder = &MockAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthProvider) EXPECT() *MockAuthProviderMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockAuthProvider) CheckPassword(password, hashedPassword string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", password, hashedPassword)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockAuthProviderMockRecorder) CheckPassword(password, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockAuthProvider)(nil).CheckPassword), password, hashedPassword)
}

// GenerateAccessToken mocks base method.
func (m *MockAuthProvider) GenerateAccessToken(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockAuthProviderMockRecorder) GenerateAccessToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockAuthProvider)(nil).GenerateAccessToken), userID)
}

// GenerateRefreshToken mocks base method.
func (m *MockAuthProvider) GenerateRefreshToken(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockAuthProviderMockRecorder) GenerateRefreshToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockAuthProvider)(nil).GenerateRefreshToken), userID)
}

// GetAuthTokenFromContext mocks base method.
func (m *MockAuthProvider) GetAuthTokenFromContext(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthTokenFromContext", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthTokenFromContext indicates an expected call of GetAuthTokenFromContext.
func (mr *MockAuthProviderMockRecorder) GetAuthTokenFromContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthTokenFromContext", reflect.TypeOf((*MockAuthProvider)(nil).GetAuthTokenFromContext), ctx)
}

// GetTokenInfoFromContext mocks base method.
func (m *MockAuthProvider) GetTokenInfoFromContext(ctx context.Context) (*TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenInfoFromContext", ctx)
	ret0, _ := ret[0].(*TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenInfoFromContext indicates an expected call of GetTokenInfoFromContext.
func (mr *MockAuthProviderMockRecorder) GetTokenInfoFromContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenInfoFromContext", reflect.TypeOf((*MockAuthProvider)(nil).GetTokenInfoFromContext), ctx)
}

// GetTokenInfoFromToken mocks base method.
func (m *MockAuthProvider) GetTokenInfoFromToken(tokenString string) (*TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenInfoFromToken", tokenString)
	ret0, _ := ret[0].(*TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenInfoFromToken indicates an expected call of GetTokenInfoFromToken.
func (mr *MockAuthProviderMockRecorder) GetTokenInfoFromToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenInfoFromToken", reflect.TypeOf((*MockAuthProvider)(nil).GetTokenInfoFromToken), tokenString)
}

// HashPassword mocks base method.
func (m *MockAuthProvider) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockAuthProviderMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockAuthProvider)(nil).HashPassword), password)
}
